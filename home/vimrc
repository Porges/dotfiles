set encoding=utf-8
set spelllang=en_gb

" Enable pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

set expandtab    " spaces for tabs
set tabstop=4    " tab inserts this many
set softtabstop=4
set shiftwidth=4 " >> inserts this many
set shiftround

set hidden

" disable bell entirely
set vb " visual bell
set t_vb=

if has("win32")
    set guifont=PragmataPro\ Mono:h11
    "set renderoptions=type:directx
endif

" no extra space between lines (this defaults to 1 on win32)
set linespace=0

let &fillchars="vert:\u2502,fold:\u2508,diff:\u2593"
let &listchars="tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"

set breakindent " indent wrapped lines, and...
set breakindentopt=shift:4,sbr " indent them another level and show 'showbreak'
set showbreak=â†ª

" no toolbar, scrollbar, menubar, left scrollbar
set guioptions-=T
set guioptions-=m
set guioptions-=r
set guioptions-=L

" add tabline, only if at least 2 tabs
set guioptions+=e
set showtabline=1

" Flash matching paren when typed
set showmatch
set matchtime=1

set mouse=a
set wildmode=longest:full,full
set completeopt=menuone,preview
set wildignorecase " ignore case for filenames

set splitbelow
set splitright

set showcmd

set hlsearch
set ignorecase
set smartcase " ignore case unless some uppercase letters present

set cursorline
"set relativenumber " show numbers as relative to current line
set number
set nowrap

set textwidth=80
set formatoptions+=n

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

augroup SpellCheckGitCommits
  au!
  au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
augroup END

" Move visual block: http://vimrcfu.com/snippet/77
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Put VIM backup & swap files in different directories, not the current working
" directory...
set directory=~/.vim/tmp,.
set backupdir=~/.vim/tmp,.

" Save undo across vim sessions
set undofile
set undodir=~/.vim/undo

" Setup for airline
let g:airline_powerline_fonts=1
" show status always
let g:airline#extensions#tabline#enabled = 1 "http://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/
let g:airline#extensions#tabline#fnamemod = ':t'

" Since we're using airline we don't need to show the mode at the bottom
set noshowmode

let g:airline_section_x = '%{PencilMode()}'

colorscheme gruvbox

" Use .gitignore file for ctrl-p
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_by_filename = 1

" Ignore build output dirs (for both vim and ctrl-p)
set wildignore+=*\\bin\\*,*\\obj\\*,*\\objd\\*,*\\out\\*,*.swp

augroup CustomFileTypes
  au!
  au Bufread,BufNewFile *.targets,*.props,*.proj setfiletype xml " Msbuild
augroup END

" map leader to space
map <SPACE> <leader>

" GHC-mod settings
map <leader>tw :GhcModTypeInsert<CR>
map <leader>ts :GhcModSplitFunCase<CR>
map <leader>tq :GhcModType<CR>
map <leader>te :GhcModTypeClear<CR>

augroup CheckHaskellOnSave
  au!
  au BufWritePost *.hs GhcModCheckAndLintAsync
augroup END

augroup WrapTextInErrorWindow
  au!
  au FileType qf setlocal wrap
augroup END

" Haskell completion
let g:haskellmode_completion_ghc = 0 " disable haskell-mode completion
augroup SetHaskellOmniFunc
  au!
  au FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END

"" SuperTab settings

" preselect first match
let g:SuperTabLongestHighlight=1

" enhanced 'longest' completion
let g:SuperTabLongestEnhanced=1

augroup ChainOmniFunc
  au!
  au FileType *
    \ if &omnifunc != '' |
    \   call SuperTabChain(&omnifunc, '<c-p>') |
    \ endif
augroup END

" TextObj-Quote settings

augroup textobj_quote
  au!
  au FileType markdown call textobj#quote#init()
  au FileType textile call textobj#quote#init()
  au FileType text call textobj#quote#init({'educate': 0})
augroup END

" pencil settings
augroup pencil
  au!
  au FileType markdown call pencil#init()
  au FileType text call pencil#init()
augroup END

" lexical settings
augroup lexical
  au!
  au FileType markdown call lexical#init()
  au FileType text call lexical#init()
augroup END

" Markdown

let g:markdown_fenced_languages = ['html', 'haskell', 'python', 'bash=sh']

"" Sneak settings

let g:sneak#s_next = 1
let g:sneak#streak = 1

" these break vsvim
if v:version !~ "VsVim"

  "replace 'f' with 1-char Sneak
  nmap f <Plug>Sneak_f
  nmap F <Plug>Sneak_F
  xmap f <Plug>Sneak_f
  xmap F <Plug>Sneak_F
  omap f <Plug>Sneak_f
  omap F <Plug>Sneak_F

  "replace 't' with 1-char Sneak
  nmap t <Plug>Sneak_t
  nmap T <Plug>Sneak_T
  xmap t <Plug>Sneak_t
  xmap T <Plug>Sneak_T
  omap t <Plug>Sneak_t
  omap T <Plug>Sneak_T

  " don't need ; anymore (sneak has clever behaviour)
  nnoremap ; :

endif

" make Y consistent with D etc
noremap Y y$

" backspace goes back to last file
nnoremap <Backspace> <c-^>

" Ctrl-J splits line
nnoremap <C-J> i<CR><ESC>

"" Dirvish

augroup dirvish_events
  au!
  au FileType dirvish silent! lcd %:p:h
augroup END

"" Signature
" Use git-gutter to highlight mark locations
let g:SignatureMarkTextHLDynamic=1
let g:SignatureMarkerTextHLDynamic=1

" vim:set ft=vim et sw=2:
